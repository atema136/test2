from collections import Counter

class Member:
    def __init__(self, name, age, location, id_number, signed=False):
        self.name = name
        self.age = age
        self.location = location
        self.id_number = id_number
        self.signed = signed

class WelfareGroup:
    def __init__(self):
        self.members = []
        self.objectives = []
        self.group_names = []
        self.selected_name = None
        self.officials = {}
        self.constitution = {}
        self.minutes_of_meeting = ""
        self.physical_address = ""
        self.registration_fee = 0
        self.payment_receipt = ""
        self.passport_photos_collected = False

    # Step 1: Register Members
    def register_member(self):
        print("📥 Register Members (Minimum 10, Age ≥18):")
        while len(self.members) < 1:
            name = input("Name: ").strip()
            try:
                age = int(input("Age: "))
                if age < 18:
                    print("❌ Must be 18 or older.")
                    continue
            except ValueError:
                print("❌ Invalid age.")
                continue
            location = input("Location (village/ward): ").strip()
            id_number = input("ID Number: ").strip()
            signed = input("Has signed? (yes/no): ").lower() == "yes"
            self.members.append(Member(name, age, location, id_number, signed))
            print(f"✅ {name} registered.")

        # Validate location majority
        locations = [m.location for m in self.members]
        common_location, count = Counter(locations).most_common(1)[0]
        if count <= len(self.members) // 2:
            print("❌ Majority must be from the same area.")
            return False
        print(f"✅ Majority from: {common_location}")
        return True

    # Step 2: Set Objectives
    def set_objectives(self):
        print("\n📌 Set Group Objectives (e.g., education, health):")
        while True:
            obj = input("Enter objective (or 'done'): ").strip()
            if obj.lower() == 'done':
                break
            if obj:
                self.objectives.append(obj)
        if not self.objectives:
            print("❌ At least one objective required.")
            return False
        return True

    # Step 3: Submit Proposed Names
    def submit_names(self):
        print("\n📝 Submit 3 Proposed Group Names:")
        for i in range(3):
            name = input(f"Name {i+1}: ").strip()
            self.group_names.append(name)
        print("📋 Select one final group name:")
        for i, name in enumerate(self.group_names, 1):
            print(f"{i}. {name}")
        idx = int(input("Enter choice (1-3): "))
        self.selected_name = self.group_names[idx-1]
        return True

    # Step 4: Elect Officials
    def elect_officials(self):
        print("\n👔 Elect Officials from Registered Members")
        member_names = [m.name for m in self.members]
        for role in ["Chairperson", "Secretary", "Treasurer"]:
            while True:
                name = input(f"Enter {role} name: ")
                if name in member_names:
                    self.officials[role] = name
                    break
                else:
                    print("❌ Must be a registered member.")
        return True

    # Step 5: Draft Constitution
    def draft_constitution(self):
        print("\n📜 Draft Constitution:")
        self.constitution["Group Name"] = self.selected_name
        self.constitution["Objectives"] = self.objectives
        self.constitution["Membership Rules"] = input("Membership Rules: ")
        self.constitution["Roles & Responsibilities"] = input("Roles & Responsibilities: ")
        self.constitution["Financial Management"] = input("Financial Management: ")
        self.constitution["Meeting Structure"] = input("Meeting Structure: ")
        self.constitution["Conflict Resolution"] = input("Conflict Resolution: ")
        return True

    # Step 6: Minutes of Formation Meeting
    def add_minutes(self):
        print("\n📝 Minutes of Formation Meeting:")
        self.minutes_of_meeting = input("Enter summary of signed minutes: ")
        return bool(self.minutes_of_meeting.strip())

    # Step 7: Physical Address
    def add_address(self):
        print("\n🏠 Physical Address (within Kakamega):")
        self.physical_address = input("Enter address: ")
        return bool(self.physical_address.strip())

    # Step 8: Registration Fee
    def pay_fee(self):
        print("\n💵 Pay Registration Fee (KES 1000 - 2000):")
        try:
            amount = int(input("Enter amount paid: "))
            if 1000 <= amount <= 2000:
                self.registration_fee = amount
                self.payment_receipt = input("Enter receipt number: ")
                return True
            else:
                print("❌ Amount must be between 1000 and 2000.")
                return False
        except ValueError:
            print("❌ Invalid number.")
            return False

    def collect_passports(self):
        self.passport_photos_collected = input("Have all officials submitted passport-size photos? (yes/no): ").lower() == "yes"

    def generate_documents_checklist(self):
        print("\n📑 Required Documents Checklist:")
        print("[✔] Registration Form (assumed filled manually)")
        print("[✔] Proposed Names: ", ", ".join(self.group_names))
        print("[✔] Member List: ", len(self.members), "members")
        print("[✔] Constitution: ", "Complete" if self.constitution else "Missing")
        print("[✔] Minutes of Meeting: ", "Available" if self.minutes_of_meeting else "Missing")
        print("[✔] Passport-size Photos: ", "Submitted" if self.passport_photos_collected else "Missing")
        print("[✔] Payment Receipt: ", self.payment_receipt if self.payment_receipt else "Missing")
        print("[✔] Physical Address: ", self.physical_address if self.physical_address else "Missing")

    def summary(self):
        print("\n🎯 REGISTRATION SUMMARY")
        print(f"Group Name: {self.selected_name}")
        print("Objectives:", ", ".join(self.objectives))
        print("Officials:")
        for role, name in self.officials.items():
            print(f" - {role}: {name}")
        print("Members:", len(self.members))
        print("Address:", self.physical_address)
        print("Fee Paid:", f"KES {self.registration_fee}")
        print("Receipt:", self.payment_receipt)

def main():
    print("📌 Kakamega County Social Welfare Group Registration Portal")
    group = WelfareGroup()

    if not group.register_member():
        return
    if not group.set_objectives():
        return
    if not group.submit_names():
        return
    if not group.elect_officials():
        return
    if not group.draft_constitution():
        return
    if not group.add_minutes():
        return
    if not group.add_address():
        return
    if not group.pay_fee():
        return

    group.collect_passports()
    print("\n✅ All registration steps completed.")
    group.generate_documents_checklist()
    group.summary()

if __name__ == "__main__":
    main()
